apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: eso-secret-db
  namespace: dev
spec:
  secretStoreRef:            # Secret을 가져올 SecretStore 작성
    name: aws-secretmanager
    kind: ClusterSecretStore
  refreshInterval: 1h
  target:
    name: aws-secrets-manager-db-config    # 가져온 값으로 클러스터에 생성할 Secret object의 이름
  data:
    - secretKey: mariadb.host
      remoteRef:             # Secrets Manager에 저장된 Secret
        key: medihub/dev/db-config
        property: mariadb.host
    - secretKey: mariadb.port
      remoteRef:
        key: medihub/dev/db-config
        property: mariadb.port
    - secretKey: db.name
      remoteRef:
        key: medihub/dev/db-config
        property: db.name
    - secretKey: db.password
      remoteRef:
        key: medihub/dev/db-config
        property: db.password
    - secretKey: mongodb.host
      remoteRef:
        key: medihub/dev/db-config
        property: mongodb.host
    - secretKey: mongodb.port.number
      remoteRef:
        key: medihub/dev/db-config
        property: mongodb.port.number
    - secretKey: redis.host
      remoteRef:
        key: medihub/dev/db-config
        property: redis.host
    - secretKey: redis.port
      remoteRef:
        key: medihub/dev/db-config
        property: redis.port

---

apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: eso-secret-openai
  namespace: dev
spec:
  secretStoreRef:            # Secret을 가져올 SecretStore 작성
    name: aws-secretmanager
    kind: ClusterSecretStore
  refreshInterval: 1h
  target:
    name: aws-secrets-manager-openai-config    # 가져온 값으로 클러스터에 생성할 Secret object의 이름
  data:
    - secretKey: openai.api.key
      remoteRef:             # Secrets Manager에 저장된 Secret
        key: medihub/dev/openai-config
        property: openai.api.key
    - secretKey: openai.model
      remoteRef:
        key: medihub/dev/openai-config
        property: openai.model
    - secretKey: openai.api.url
      remoteRef:
        key: medihub/dev/openai-config
        property: openai.api.url
    - secretKey: openai.api.key.bot
      remoteRef:
        key: medihub/dev/openai-config
        property: openai.api.key.bot

---

apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: eso-secret-s3
  namespace: dev
spec:
  secretStoreRef:            # Secret을 가져올 SecretStore 작성
    name: aws-secretmanager
    kind: ClusterSecretStore
  refreshInterval: 1h
  target:
    name: aws-secrets-manager-s3-config    # 가져온 값으로 클러스터에 생성할 Secret object의 이름
  data:
    - secretKey: s3.credentials.access-key
      remoteRef:             # Secrets Manager에 저장된 Secret
        key: medihub/dev/s3-config
        property: s3.credentials.access-key
    - secretKey: s3.credentials.secret-key
      remoteRef:
        key: medihub/dev/s3-config
        property: s3.credentials.secret-key
    - secretKey: s3.credentials.region
      remoteRef:
        key: medihub/dev/s3-config
        property: s3.credentials.region
    - secretKey: s3.bucket
      remoteRef:
        key: medihub/dev/s3-config
        property: s3.bucket

---

apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: eso-secret-elastic
  namespace: dev
spec:
  secretStoreRef:            # Secret을 가져올 SecretStore 작성
    name: aws-secretmanager
    kind: ClusterSecretStore
  refreshInterval: 1h
  target:
    name: aws-secrets-manager-elasticsearch-config    # 가져온 값으로 클러스터에 생성할 Secret object의 이름
  data:
    - secretKey: elastic_uris
      remoteRef:             # Secrets Manager에 저장된 Secret
        key: medihub/dev/elasticsearch-config
        property: elastic_uris
    - secretKey: elastic_user
      remoteRef:
        key: medihub/dev/elasticsearch-config
        property: elastic_user
    - secretKey: elastic_password
      remoteRef:
        key: medihub/dev/elasticsearch-config
        property: elastic_password
    - secretKey: logstash_host_name
      remoteRef:
        key: medihub/dev/elasticsearch-config
        property: logstash_host_name

---

apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: eso-secret-other
  namespace: dev
spec:
  secretStoreRef:            # Secret을 가져올 SecretStore 작성
    name: aws-secretmanager
    kind: ClusterSecretStore
  refreshInterval: 1h
  target:
    name: aws-secrets-manager-other-config    # 가져온 값으로 클러스터에 생성할 Secret object의 이름
  data:
    - secretKey: SECRET_KEY
      remoteRef:             # Secrets Manager에 저장된 Secret
        key: medihub/dev/other-config
        property: SECRET_KEY
    - secretKey: user.default-password
      remoteRef:
        key: medihub/dev/other-config
        property: user.default-password

---

apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: eso-secret-news
  namespace: dev
spec:
  secretStoreRef:            # Secret을 가져올 SecretStore 작성
    name: aws-secretmanager
    kind: ClusterSecretStore
  refreshInterval: 1h
  target:
    name: aws-secrets-manager-newsapi-config    # 가져온 값으로 클러스터에 생성할 Secret object의 이름
  data:
    - secretKey: newsapi.api-key
      remoteRef:             # Secrets Manager에 저장된 Secret
        key: medihub/dev/newsapi-config
        property: newsapi.api-key
    - secretKey: newsapi.base-url
      remoteRef:
        key: medihub/dev/newsapi-config
        property: newsapi.base-url